Request Chaining Refactor
-------------------------

In prior versions of Unfiltered, extractors generally passed their
source object into the extracted tuple, to support chaining by nesting
extractors. This provided the needed flexibility, but it littered
client code with `_`'s for unneeded request and map references. (Also,
it's rather un-fun to maintain in every extractor in the library.)

It was pointed out to us that Scala's pattern matching can be extended
to support this need with as a general operation.

    object & { def unapply[A](a: A) = Some(a, a) }

With this in scope, we can do:

    case GET(Path("/secret") & BasicAuth(name, pass)) =>

Because (if you're curious) that evaluates as:

    case GET(&(Path("/secret"), BasicAuth(name, pass))) =>

Refactoring client code from 0.2.x extractors is a bit painful, but
the improved readability should be worth it.

OAuth Module
------------

Support for the official [OAuth](http://oauth.net/) final [1.0](https://www.rfc-editor.org/rfc/rfc5849) provider specification.

An example [client](https://github.com/softprops/unfiltered-oauth-client.g8/#readme)
and [server](https://github.com/softprops/unfiltered-oauth-server.g8/#readme) have been provided as [g8](https://github.com/n8han/giter8/#readme) templates. Otherwise please see the OAuth module's [readme](https://github.com/n8han/Unfiltered/tree/master/oauth/#readme)

Parameter validation
--------------------

Values from outside the parameters map can easily participate in
QParams validation using [QParams.external][external] as an
alternative to `QParams.lookup`.

[external]: http://sourced.implicit.ly/net.databinder/unfiltered/0.3.0/request/params.scala.html#20390

For example, to fail if a User-Agent header is not present:

    agent <- external("UA", UserAgent(request).firstOption) is
      required("missing header")

This would generate a `Fail` named "UA" with the error message
"missing header" when a request comes in without this header. The
failure would be processed and reported along with other validation
failures.

Breaking change: The method [QParams.pred][pred] now takes its predicate
function and error function in a single parameter list, to facilitate
inference of its two type parameters.

[pred]: http://sourced.implicit.ly/net.databinder/unfiltered/0.3.0/request/params.scala.html#20412

Scalate Interface
----------------

Applications using the built-in [Scalate responder][scalate] can now
override the creation of a DefaultRenderContext to use a
servlet-specific rendering context, if required.

[scalate]: http://sourced.implicit.ly/net.databinder/unfiltered-scalate/0.3.0/scalate.scala.html#18615
